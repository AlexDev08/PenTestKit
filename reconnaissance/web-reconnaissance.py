#!/usr/bin/python
# encoding: UTF-8

"""
    This file is part of PenTestKit
    Copyright (C) 2017 @maldevel
    https://github.com/maldevel/PenTestKit
    
    PenTestKit - Useful tools for Penetration Testing.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    For more see the file 'LICENSE' for copying permission.

"""

__author__ = "maldevel"
__copyright__ = "Copyright (c) 2017 @maldevel"
__credits__ = ["maldevel"]
__license__ = "GPLv3"
__version__ = "0.1"
__maintainer__ = "maldevel"

################################

import argparse
import sys
import os
import requests

from termcolor import colored
from argparse import RawTextHelpFormatter

################################

from requests.packages.urllib3.exceptions import InsecureRequestWarning #remove insecure https warning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning) #remove insecure https warning

################################

def yellow(text):
    return colored(text, 'yellow', attrs=['bold'])

def green(text):
    return colored(text, 'green', attrs=['bold'])

def red(text):
    return colored(text, 'red', attrs=['bold'])

def cyan(text):
    return colored(text, 'cyan', attrs=['bold'])

################################

message = """
 __          __  _     _____                      
 \ \        / / | |   |  __ \                     
  \ \  /\  / /__| |__ | |__) |___  ___ ___  _ __  
   \ \/  \/ / _ \ '_ \|  _  // _ \/ __/ _ \| '_ \ 
    \  /\  /  __/ |_) | | \ \  __/ (_| (_) | | | |
     \/  \/ \___|_.__/|_|  \_\___|\___\___/|_| |_|
                                                  
       Web Application Reconnaissance | @maldevel                
                             {}: {}
""".format(red('Version'), yellow(__version__)) 

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=message, formatter_class=RawTextHelpFormatter)
    
    parser.add_argument("-u", "--url", 
                        action="store", 
                        metavar='URL',
                        dest='url',
                        type=str,
                        default=None,
                        required=True,
                        help='The url to scan, e.g. http://example.com, https://example.com, http://192.168.1.1')

    if len(sys.argv) is 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
  
    print message

    url = args.url
    https = False

    if '://' not in url:
        print red('[-] {}: Invalid url'.format(url))
        sys.exit(2) 

    if 'https' in url:
        https = True

    r = requests.head(url, verify=False)

    for key, value in r.headers.items() :
        print (key, value)

